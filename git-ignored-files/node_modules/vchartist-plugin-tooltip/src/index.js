import Chartist from 'chartist'

const defaultOptions = {
  valueTransform: Chartist.noop,
  seriesName: true // Show name of series in tooltip.
}

Chartist.plugins = Chartist.plugins || {}

Chartist.plugins.tooltip = function ($, options) {
  if (!$) {
    throw new Error('need jQuery')
  }
  options = Chartist.extend({}, defaultOptions, options)

  return function tooltip (chart) {
    let tooltipSelector = '.ct-point'
    if (chart instanceof Chartist.Bar) {
      tooltipSelector = '.ct-bar'
    } else if (chart instanceof Chartist.Pie) {
      tooltipSelector = '[class^=ct-slice]'
    }

    const $chart = $(chart.container)
    const $toolTip = $chart
      .append('<div class="ct-tooltip"></div>')
      .find('.ct-tooltip')
      .hide()

    $chart.on('mouseenter', tooltipSelector, function () {
      const $point = $(this)
      const seriesName = $point.parent().attr('ct:series-name')
      let tooltipText = ''

      if (options.seriesName && seriesName) {
        tooltipText += seriesName + '<br>'
      }

      if ($point.attr('ct:meta')) {
        tooltipText += $point.attr('ct:meta') + '<br>'
      }

      const value = $point.attr('ct:value') || '0'

      tooltipText += options.valueTransform(value)

      $toolTip.html(tooltipText).show()
    })

    $chart.on('mouseleave', tooltipSelector, function () {
      $toolTip.hide()
    })

    $chart.on('mousemove', function (event) {
      $toolTip.css({
        left: (event.offsetX || event.originalEvent.layerX) - $toolTip.width() / 2 - 10,
        top: (event.offsetY || event.originalEvent.layerY) - $toolTip.height() - 40
      })
    })
  }
}

export default Chartist.plugins.tooltip
