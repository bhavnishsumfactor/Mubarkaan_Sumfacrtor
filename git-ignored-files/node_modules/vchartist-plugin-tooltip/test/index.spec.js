import Vue from 'vue'
import VChartist from 'vchartist'
import vctTooltip from '../src/index'
import $ from 'jQuery'

Vue.use(VChartist, {
  messageNoData: 'You have not enough data'
})

describe('test title plugin', function () {
  let el
  beforeEach(function () {
    el = document.createElement('div')
    el.id = 'app'
    document.body.appendChild(el)
  })

  afterEach(function () {
    el.parentElement.removeChild(el)
  })
  it('should render correct contents', done => {
    // eslint-disable-next-line no-unused-vars
    const vm = new Vue({
      el,
      replace: false,
      template: `<chartist
        type="Line"
        :data="chartData"
        :options="chartOptions">
      </chartist>`,
      data: {
        chartData: {
          labels: ['A', 'B', 'C'],
          series: [{
            name: 'test',
            data: [1, 3, 2]
          }]
        },
        chartOptions: {
          lineSmooth: false,
          width: '100%',
          height: '300px',
          chartPadding: {
            top: 40,
            right: 15,
            bottom: 30,
            left: 30
          },
          plugins: [
            vctTooltip($)
          ]
        }
      }
    })

    setTimeout(function () {
      const tooltip = document.querySelectorAll('.ct-tooltip')
      expect(tooltip.length).to.be.equal(1)
      done()
    }, 50)
  })
  it('should render seriesName', done => {
    // eslint-disable-next-line no-unused-vars
    const vm = new Vue({
      el,
      replace: false,
      template: `<chartist
        type="Line"
        :data="chartData"
        :options="chartOptions">
      </chartist>`,
      data: {
        chartData: {
          labels: ['A', 'B', 'C'],
          series: [{
            name: 'test',
            data: [1, 3, 2]
          }]
        },
        chartOptions: {
          lineSmooth: false,
          width: '100%',
          height: '300px',
          chartPadding: {
            top: 40,
            right: 15,
            bottom: 30,
            left: 30
          },
          plugins: [
            vctTooltip($, {
              seriesName: true
            })
          ]
        }
      }
    })

    setTimeout(function () {
      const cp = document.querySelectorAll('.ct-point')
      $(cp[0]).trigger('mouseenter')
      const tooltip = document.querySelectorAll('.ct-tooltip')
      expect(tooltip[0].innerHTML.indexOf('test')).to.be.above(-1)
      let style = window.getComputedStyle(tooltip[0])
      expect(style.display).to.not.equal('none')
      $(cp[0]).trigger('mouseleave')
      window.getComputedStyle(tooltip[0])
      expect(style.display).to.equal('none')
      done()
    }, 50)
  })
  it('should render meta', done => {
    // eslint-disable-next-line no-unused-vars
    const vm = new Vue({
      el,
      replace: false,
      template: `<chartist
        type="Line"
        :data="chartData"
        :options="chartOptions">
      </chartist>`,
      data: {
        chartData: {
          labels: ['A', 'B', 'C'],
          series: [{
            name: 'test',
            data: [{
              value: 1,
              meta: 'one'
            }, {
              value: 3,
              meta: 'three'
            }, {
              value: 2,
              meta: 'two'
            }]
          }]
        },
        chartOptions: {
          lineSmooth: false,
          width: '100%',
          height: '300px',
          chartPadding: {
            top: 40,
            right: 15,
            bottom: 30,
            left: 30
          },
          plugins: [
            vctTooltip($, {
              seriesName: true
            })
          ]
        }
      }
    })

    setTimeout(function () {
      const cp = document.querySelectorAll('.ct-point')
      $(cp[0]).trigger('mouseenter')
      const tooltip = document.querySelectorAll('.ct-tooltip')
      expect(tooltip[0].innerHTML.indexOf('one')).to.be.above(-1)
      done()
    }, 50)
  })
  it('test valueTransform', done => {
    const spy = sinon.spy(function (value) {
      return value
    })
    // eslint-disable-next-line no-unused-vars
    const vm = new Vue({
      el,
      replace: false,
      template: `<chartist
        type="Line"
        :data="chartData"
        :options="chartOptions">
      </chartist>`,
      data: {
        chartData: {
          labels: ['A', 'B', 'C'],
          series: [{
            name: 'test',
            data: [1, 3, 2]
          }]
        },
        chartOptions: {
          lineSmooth: false,
          width: '100%',
          height: '300px',
          chartPadding: {
            top: 40,
            right: 15,
            bottom: 30,
            left: 30
          },
          plugins: [
            vctTooltip($, {
              seriesName: true,
              valueTransform: spy
            })
          ]
        }
      }
    })

    setTimeout(function () {
      const cp = document.querySelectorAll('.ct-point')
      $(cp[0]).trigger('mouseenter')
      expect(spy.called).to.be.ok

      done()
    }, 50)
  })
  it('test mousemove', done => {
    // eslint-disable-next-line no-unused-vars
    const vm = new Vue({
      el,
      replace: false,
      template: `<chartist
        type="Line"
        :data="chartData"
        :options="chartOptions">
      </chartist>`,
      data: {
        chartData: {
          labels: ['A', 'B', 'C'],
          series: [{
            name: 'test',
            data: [1, 3, 2]
          }]
        },
        chartOptions: {
          lineSmooth: false,
          width: '100%',
          height: '300px',
          chartPadding: {
            top: 40,
            right: 15,
            bottom: 30,
            left: 30
          },
          plugins: [
            vctTooltip($, {
              seriesName: true
            })
          ]
        }
      }
    })

    setTimeout(function () {
      const cp = document.querySelectorAll('.ct-point')

      const e = $.Event('mousemove')
      e.pageX = 0
      e.pageY = 0
      e.offsetX = 100
      e.offsetY = 100
      $(cp[0]).trigger(e)

      const tooltip = document.querySelectorAll('.ct-tooltip')
      $(tooltip[0]).show()
      const rect = tooltip[0].getBoundingClientRect()
      expect(rect.left).to.equal(50)
      expect(rect.top).to.equal(60)
      done()
    }, 50)
  })
})
